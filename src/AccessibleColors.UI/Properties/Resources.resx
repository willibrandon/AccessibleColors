<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="icon_128x128" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\icon_128x128.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  
  <!-- Main Form Title -->
  <data name="MainForm_Title" xml:space="preserve">
    <value>Accessible Colors Tool</value>
  </data>

  <!-- Heading Text -->
  <data name="Heading_Text" xml:space="preserve">
    <value>AccessibleColors: WCAG-Compliant Contrast Colors</value>
  </data>

  <!-- Explanation Heading -->
  <data name="Explanation_Heading" xml:space="preserve">
    <value>Explanation</value>
  </data>

  <!-- Explanation Body -->
  <data name="Explanation_Body" xml:space="preserve">
    <value>Enter a foreground and background color in RGB hexadecimal format or choose a color using the Color Picker. Use the Lightness slider to adjust the perceived lightness of the color.

WCAG 2.0 level AA requires a contrast ratio of at least 4.5:1 for normal text and 3:1 for large text. WCAG 2.1 requires a contrast ratio of at least 3:1 for graphics and user interface components (such as form input borders). WCAG Level AAA requires a contrast ratio of at least 7:1 for normal text and 4.5:1 for large text.

Large text is defined as 14 point (typically 18.66px) and bold or larger, or 18 point (typically 24px) or larger.</value>
  </data>

  <!-- Foreground/Background Color Labels -->
  <data name="ForegroundColor_Label" xml:space="preserve">
    <value>Color (#RRGGBB):</value>
  </data>
  <data name="BackgroundColor_Label" xml:space="preserve">
    <value>Color (#RRGGBB):</value>
  </data>

  <!-- Alpha Label -->
  <data name="Alpha_Label" xml:space="preserve">
    <value>Alpha (0-255):</value>
  </data>

  <!-- Lightness Label -->
  <data name="Lightness_Label" xml:space="preserve">
    <value>Lightness:</value>
  </data>

  <!-- Text Size Label -->
  <data name="TextSize_Label" xml:space="preserve">
    <value>Text Size (pt):</value>
  </data>

  <!-- Sample Text Label -->
  <data name="SampleText_Label" xml:space="preserve">
    <value>Sample Text:</value>
  </data>

  <!-- Bold Checkbox -->
  <data name="Bold_Checkbox" xml:space="preserve">
    <value>Bold</value>
  </data>

  <!-- Color Picker Button -->
  <data name="ColorPicker_Button" xml:space="preserve">
    <value>Color Picker</value>
  </data>

  <!-- Eye Dropper Button -->
  <data name="EyeDropper_Button" xml:space="preserve">
    <value>Eye Dropper</value>
  </data>

  <!-- Save Palette Button -->
  <data name="SavePalette_Button" xml:space="preserve">
    <value>Save Palette</value>
  </data>

  <!-- Load Palette Button -->
  <data name="LoadPalette_Button" xml:space="preserve">
    <value>Load Palette</value>
  </data>

  <!-- Load Palette Dialog Title -->
  <data name="LoadPalette_DialogTitle" xml:space="preserve">
    <value>Load Palette</value>
  </data>

  <!-- Save Palette Dialog Title -->
  <data name="SavePalette_DialogTitle" xml:space="preserve">
    <value>Save Palette</value>
  </data>

  <!-- Contrast Ratio Format -->
  <data name="ContrastRatio_Format" xml:space="preserve">
    <value>Contrast Ratio: {0:F2}:1</value>
  </data>

  <!-- Compliance Messages -->
  <data name="Compliance_Compliant" xml:space="preserve">
    <value>WCAG AA Compliant for specified text size/weight</value>
  </data>
  <data name="Compliance_NotCompliant" xml:space="preserve">
    <value>Not Compliant</value>
  </data>

  <!-- Invalid Input for Contrast Ratio -->
  <data name="ContrastRatio_InvalidInput" xml:space="preserve">
    <value>Invalid Input</value>
  </data>

  <!-- Tooltips -->
  <data name="Tooltip_ForegroundColor" xml:space="preserve">
    <value>Enter the foreground color in #RRGGBB format.</value>
  </data>
  <data name="Tooltip_ForegroundPicker" xml:space="preserve">
    <value>Open a color picker dialog to select the foreground color.</value>
  </data>
  <data name="Tooltip_ForegroundEyedropper" xml:space="preserve">
    <value>Use the eyedropper to pick a color from anywhere on your screen.</value>
  </data>
  <data name="Tooltip_Alpha" xml:space="preserve">
    <value>Adjust the transparency (0-255) of the color.</value>
  </data>
  <data name="Tooltip_ForegroundLightness" xml:space="preserve">
    <value>Adjust the perceived lightness of the foreground color.</value>
  </data>

  <data name="Tooltip_BackgroundColor" xml:space="preserve">
    <value>Enter the background color in #RRGGBB format.</value>
  </data>
  <data name="Tooltip_BackgroundPicker" xml:space="preserve">
    <value>Open a color picker dialog to select the background color.</value>
  </data>
  <data name="Tooltip_BackgroundEyedropper" xml:space="preserve">
    <value>Use the eyedropper to pick a background color from anywhere on your screen.</value>
  </data>
  <data name="Tooltip_BackgroundLightness" xml:space="preserve">
    <value>Adjust the perceived lightness of the background color.</value>
  </data>

  <data name="Tooltip_TextSize" xml:space="preserve">
    <value>Set the text size in points. Large text has looser contrast requirements.</value>
  </data>
  <data name="Tooltip_Bold" xml:space="preserve">
    <value>Check if the text is bold. Bold >= 14pt is considered large text.</value>
  </data>
  <data name="Tooltip_SampleText" xml:space="preserve">
    <value>Enter your own sample text to preview.</value>
  </data>

  <data name="Tooltip_SavePalette" xml:space="preserve">
    <value>Save the current colors, text settings, and sample text as a JSON file.</value>
  </data>
  <data name="Tooltip_LoadPalette" xml:space="preserve">
    <value>Load previously saved palette settings from a JSON file.</value>
  </data>

</root>